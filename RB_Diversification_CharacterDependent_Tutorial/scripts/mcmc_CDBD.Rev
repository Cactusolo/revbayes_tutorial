################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   character-dependent birth-death model
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

T <- readTrees("data/Primates_tree.nex")[1]
data <- readDiscreteCharacterData("data/Primates_morph.nex")

# in this example we are only going to use the first character of the matrix
data.excludeAll()
data.includeCharacter(1)

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()

# set my move index
mvi = 0


NUM_STATES = 2



####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
diversification_mean <- ln( ln(450.0/2.0) / T.rootAge() )
turnover_mean <- ln( ln(450.0/2.0) / T.rootAge() )
diversification_sd <- 0.587405*2
turnover_sd <- 0.587405*2

for (i in 1:NUM_STATES) {

    ### Create a lognormal distributed variable for the diversification rate
    diversification[i] ~ dnLognormal(mean=diversification_mean,sd=diversification_sd) 
    moves[++mvi] = mvScale(diversification[i],lambda=1.0,tune=true,weight=3.0)

    ### Create a lognormal distributed variable for the turnover rate
    turnover[i] ~ dnLognormal(mean=turnover_mean,sd=turnover_sd) 
    moves[++mvi] = mvScale(turnover[i],lambda=1.0,tune=true,weight=3.0)


    ### Transform the parameters
    speciation[i] := ln( diversification[i] + turnover[i] )
    extinction[i] := ln( turnover[i] ) 

}

### Create a rate-matrix for the relative-rate of change between categories
### Here we simply use equal rates -> a Jukes-Cantor rate-matrix with n states
rate_matrix <- fnJC( NUM_STATES )

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior <- simplex( rep(1,NUM_STATES) )


### Create a exponential distributed variable for the rate of rate-shift events
event_rate ~ dnExponential(1.0)
moves[++mvi] = mvScale(event_rate,lambda=1,tune=true,weight=5)


### Create the fix parameter for the age of the root set to the observed age
root <- T.rootAge()


### rho is the probability of sampling species at the present
### fix this to 367/450, since there are ~450 described species of primates
### and we have sampled 367
rho <- T.ntips()/450


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge                   = root,
                    hiddenSpeciationRates     = [ 0.0 ],
                    observedSpeciationRates   = speciation,
                    hiddenExtinctionRates     = [ 0.0 ],
                    observedExtinctionRates   = extinction, 
                    Q                         = rate_matrix,
                    delta                     = event_rate,
                    pi                        = rate_category_prior,
                    rho                       = rho,
                    condition                 = "survival",
                    taxa                      = taxa )

### clamp the model with the "observed" tree
timetree.clamp( T )
timetree.clampCharData( data )




#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rho)

### set up the monitors that will output parameter values to file and screen 
monitors[1] = mnModel(filename="output/primates_CBBD.log",printgen=10, separator = TAB)
monitors[2] = mnScreen(printgen=10, event_rate)


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals
mymcmc.burnin(generations=5000,tuningInterval=200)

### run the MCMC
mymcmc.run(generations=10000)


## quit ##
q()
