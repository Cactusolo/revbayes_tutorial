
# switch rates
sr ~ dnDirichlet([1,1])
switch_rates := [ [   0.0, sr[1], sr[1]],
                  [ sr[2],   0.0, sr[1]],
                  [ sr[2], sr[2], sr[1]] ]
Q_switch := fnFreeK(switch_rates)

# clock rates per class
pi_clock_rates ~ dnDirichlet( [1,1,1] )
clock_rates := 3 * pi_clock_rates

# rate matrix per class
Q_class[1] := fnJC(4)

Q_class[2] := fnJC(4)

bf ~ dnDirichlet( [1,1,1,1] )
Q_class[3] := fnF81( bf )

# create the rate matrix
Q := fnCovarionRateMatrix(Q=Q_class, switch_rates=Q_switch, clock_rates=clock_rates)

# transition probabilities for branch of length 0.1
P <- Q.getTransitionProbabilities(rate=0.1)
