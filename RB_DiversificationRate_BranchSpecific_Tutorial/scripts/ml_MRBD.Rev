################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   multi-rate birth-death model
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

tree <- readTrees("data/primates_Springer.tre")[1]

# Get some useful variables from the data. We need these later on.
taxa <- tree.taxa()
tree_length <- tree.treeLength()
root_age <- tree.rootAge()

# set my move index
mvi = 0
mni = 0

# Global parameters for our analysis
NUM_RATE_CATEGORIES = 4
EXPECTED_NUM_EVENTS = 2
NUM_TOTAL_SPECIES = 450
H = 0.587405



####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create a lognormal distributed variable for the mean diversification rate
diversification_prior_mean <- ln( ln(NUM_TOTAL_SPECIES/2.0) / root_age )
diversification_mean ~ dnLognormal(mean=diversification_prior_mean, sd=H)
moves[++mvi] = mvScale(diversification_mean,lambda=1,tune=true,weight=5)


### Create a deterministic variable for the diversification rate categories
### using a discretized lognormal distribution (the N-quantiles of it)
diversification_sd <- 2*H
diversification := fnDiscretizeDistribution( dnLognormal(ln(diversification_mean), diversification_sd), NUM_RATE_CATEGORIES )


### Create a lognormal distributed variable for the turnover rate
turnover_prior_mean <- ln( ln(NUM_TOTAL_SPECIES/2.0) / root_age )
turnover_mean ~ dnLognormal(mean=turnover_prior_mean,sd=2*H) 
moves[++mvi] = mvScale(turnover_mean,lambda=1.0,tune=true,weight=3.0)

### Create a deterministic variable for the turnover rate categories
### using a discretized lognormal distribution (the N-quantiles of it)
turnover := fnDiscretizeDistribution( dnLognormal(ln(turnover_mean), H), NUM_RATE_CATEGORIES )



### Transform the parameters
speciation := diversification + turnover
extinction := turnover 


### Create an exponential distributed variable for the rate of rate-shift events
event_rate ~ dnLognormal( ln( EXPECTED_NUM_EVENTS/tree_length ), H)
moves[++mvi] = mvScale(event_rate,lambda=1,tune=true,weight=5)


### rho is the probability of sampling species at the present
### fix this to 367/450, since there are ~450 described species of primates
### and we have sampled 367
rho <- tree.ntips()/NUM_TOTAL_SPECIES


### Create a rate-matrix for the relative-rate of change between categories
### Here we simply use equal rates -> a Jukes-Cantor rate-matrix with n states
rate_matrix <- fnJC( NUM_RATE_CATEGORIES )

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior <- simplex( rep(1,NUM_RATE_CATEGORIES) )


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnMRBDP(lambda=speciation, mu=extinction, rootAge=root_age, rho=rho, Q=rate_matrix, pi=rate_category_prior, delta=event_rate, taxa=taxa )

### clamp the model with the "observed" tree
timetree.clamp(tree)




#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rho)

### set up the monitors that will output parameter values to file and screen 
monitors[++mni] = mnModel(filename="output/primates_MRBD.log",printgen=10, separator = TAB)
monitors[++mni] = mnScreen(printgen=10, diversification_mean, turnover)




################
# The Analysis #
################

### compute power posterior distributions
pow_p = powerPosterior(mymodel, moves, monitors, "output/MRBD_powp.out", cats=100, sampleFreq=10) 
pow_p.burnin(generations=5000,tuningInterval=200)
pow_p.run(generations=2000)  

### Use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file="output/MRBD_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### Use path-sampling to calculate marginal likelihoods
ps = pathSampler(file="output/MRBD_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal() 


## quit ##
q()