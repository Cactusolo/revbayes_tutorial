################################################################################
#
# MCMC analysis of endocranial volume in primates
# 
# Model:
# Ornstein-Uhlenbeck model
#
#
# author: Sebastian Hoehna
#
################################################################################

########
# Data #
########

# read the data
contData <- readContinuousCharacterData("data/primates_lhtlog.nex")

contData.excludeAll()
contData.includeCharacter(1) 
#contData.excludeCharacter(2:11)


# get some useful variables from the data
numTips <- contData.ntaxa()
numNodes <- 2*numTips - 1
numBranches <- 2*numTips - 2

mi = 0



########
# Tree #
########

# work under fixed topology
treeArray <- readTrees("data/primates.tree")
psi <- treeArray[1]



######
# OU #
######


logOptim ~ dnUniform(-10,10)
moves[++mi] = mvSlide(logOptim,delta=10,tune=true,weight=2)

# use the optim as the root value
logmass[numNodes] := logOptim

logAlpha ~ dnUniform(-10,10)
moves[++mi] = mvSlide(logAlpha,delta=10,tune=true,weight=2)
alpha := 10^logAlpha


# sigma: variance per unit of time of the Brownian motion
logSigma ~ dnUniform(-5,5)
sigma := 10^logSigma

moves[++mi] = mvSlide(logSigma, delta=1.0, tune=true, weight=2.0)


# univariate Ornstein-Uhlenbeck process along the tree # parameterized by sigma
for (i in (numNodes-1):(numTips+1) ) {
  logmass[i] ~ dnOrnsteinUhlenbeck( x0=logmass[psi.parent(i)], theta=logOptim, alpha=alpha, sigma=sigma, time=psi.branchLength(i) )
  # moves on the Ornstein-Uhlenbeck process
  moves[++mi] = mvSlide( logmass[i], delta=10, tune=true ,weight=2)
}

for (i in numTips:1 ) {
  logmass[i] ~ dnOrnsteinUhlenbeck( x0=logmass[psi.parent(i)], theta=logOptim, alpha=alpha, sigma=sigma, time=psi.branchLength(i) )
  # condition Brownian model on quantitative trait data (first column of the dataset)
  logmass[i].clamp(contData.getTaxon(psi.nodeName(i))[1])
}




########
# MCMC #
########

mymodel = model(sigma)

monitors[1] = mnScreen(printgen=1000, logOptim, alpha, sigma)
monitors[2] = mnModel(filename="output/OU.log",printgen=10, separator = TAB)
monitors[3] = mnExtNewick(filename="output/primates_mass_OU_ext.trees", isNodeParameter=TRUE, printgen=10, separator = TAB, tree=psi, logmass)

 
mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.burnin(generations=10000,tuningInterval=250)
mymcmc.run(generations=30000)

treetrace = readTreeTrace("output/primates_mass_OU_ext.trees", treetype="clock")
map_tree = mapTree(treetrace,"output/primates_mass_OU_ext_MAP.tree")

q()

