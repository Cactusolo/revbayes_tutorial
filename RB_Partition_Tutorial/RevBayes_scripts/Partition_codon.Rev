################################################################################
#
# RevBayes Exercise: Data partitioning strategies
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model with codon specific substitution models
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R Moore
#
################################################################################



#######################
# Reading in the Data #
#######################

# read in the character data
data_cox2 <- readDiscreteCharacterData("data/primates_cox2.nex")
data_cytb <- readDiscreteCharacterData("data/primates_cytb.nex")


# partition for 1st codon position
data[1] <- data_cox2
data[1].setCodonPartition( v(1,2) )

# partition for 2nd codon position
data[2] <- data_cox2
data[2].setCodonPartition( 3 )


# partition for 1st codon position
data[3] <- data_cytb
data[3].setCodonPartition( v(1,2) )

# partition for 2nd codon position
data[4] <- data_cytb
data[4].setCodonPartition( 3 )

n_parts <- data.size()

# Get the size of each partition
for (i in 1:n_parts)
    n_sites[i] <- data[i].nchar()

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
taxa <- data[1].taxa()
n_branches <- 2 * n_species - 3

mvi <- 1
mni <- 1

#################################
#      Substitution Model       #
#   Loop over each partition    #
#################################
  
for (i in 1:n_parts){

  # exchangeability rates for partition i
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mvi++] = mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

  # stationary frequencies for partition i
  pi_prior[i] <- v(1,1,1,1)
  pi[i] ~ dnDirichlet(pi_prior[i])
  moves[mvi++] = mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=2) 

  # rate matrix for partition i
  Q[i] := fnGTR(er[i],pi[i]) 
  
  # +Gamma for partition i
  alpha_prior_min[i] <- 0.1
  alpha_prior_max[i] <- 50.0
  alpha[i] ~ dnUnif( alpha_prior_min[i], alpha_prior_max[i] )
  norm_gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )
  moves[mvi++] = mvScale(alpha[i], lambda=0.8, tune=true, weight=3.0)

  # the probability of a site being invariable
  pinvar[i] ~ dnBeta(1,1)
  moves[mvi++] = mvScale(pinvar[i], lambda=0.1, tune=true, weight=2.0)
  moves[mvi++] = mvSlide(pinvar[i], delta=0.1, tune=true, weight=2.0)

  # specify a rate multiplier for each partition
  part_rate_mult[i] ~ dnExponential( 1.0 )

  moves[mvi++] = mvScale(part_rate_mult[i], lambda=1.0, tune=true, weight=2.0)

}


##############
# Tree model #
##############

speciation ~ dnExponential(10.)
extinction ~ dnExponential(10.)

# rescaling mv on speciation and extinction rates
moves[mvi++] = mvScale(speciation, lambda=1, tune=true, weight=3.0)
moves[mvi++] = mvScale(extinction, lambda=1, tune=true, weight=3.0)

sampling_fraction <- 23. / 450 # 23 out of the ~ 450 primate species

psi ~ dnBDP(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=75, taxa=taxa)

# moves on the tree
moves[mvi++] = mvNNI(psi, weight=10.0)
moves[mvi++] = mvFNPR(psi, weight=5.0)
moves[mvi++] = mvNodeTimeSlideUniform(psi, weight=10.0)


###################
# PhyloCTMC Model #
###################

for (i in 1:n_parts){
  phyloSeq[i] ~ dnPhyloCTMC(tree=psi, Q=Q[i], branchRates=part_rate_mult[i], siteRates=norm_gamma_rates[i], pInv=pinvar[i], type="DNA")
  phyloSeq[i].clamp(data[i])
}



############
# Analysis #
############

mymodel = model(psi)

# add monitors
monitors[mni++] = mnScreen(part_rate_mult, speciation, extinction, printgen=1000)
monitors[mni++] = mnFile(psi, filename="output/PS2.tre", printgen=10)
monitors[mni++] = mnFile(er[1], pi[1], alpha[1], norm_gamma_rates[1], pinvar[1], part_rate_mult[1], er[2], pi[2], alpha[2], norm_gamma_rates[2], pinvar[2], part_rate_mult[2], er[3], pi[3], alpha[3], norm_gamma_rates[3], pinvar[3], part_rate_mult[3], er[4], pi[4], alpha[4], norm_gamma_rates[4], pinvar[4], part_rate_mult[4], speciation, extinction, filename="output/PS2.params.txt",printgen=10)

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.burnin(10000,250)
mymcmc.run(30000)

# summarize output
treetrace = readTreeTrace("output/PS2.tre")
#treetrace.summarize()

map_tree = mapTree(treetrace,"output/PS2_map.tre")


# you may want to quit RevBayes now
q()

