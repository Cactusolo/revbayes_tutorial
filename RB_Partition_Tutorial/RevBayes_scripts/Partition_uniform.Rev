################################################################################
#
# RevBayes Exercise: Bayesian inference using MCMC and output analysis
# 
# This file: Specifies the full model parameters and moves for a single, uniform
#				partition model
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R. Moore
#
################################################################################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes
data_cox2 = readDiscreteCharacterData("data/primates_cox2.nex")
data_cytb = readDiscreteCharacterData("data/primates_cytb.nex")

### Create concatenated data matrix
data = concatenate( data_cox2, data_cytb )

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_sites <- data.nchar()
taxa <- data.taxa()
n_branches <- 2 * n_species - 3

mvi <- 1
mni <- 1

#### specify the GTR+G+I substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mvi++] = mvSimplexElementScale(er, alpha=10.0, tune=false, weight=3.0)

pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves[mvi++] = mvSimplexElementScale(pi, alpha=10.0, tune=false, weight=2.0)


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


alpha_prior_min <- 0.1
alpha_prior_max <- 50.0
alpha ~ dnUnif( alpha_prior_min, alpha_prior_max )
norm_gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves[mvi++] = mvScale(alpha, lambda=0.1, tune=false, weight=4.0)

# the probability of a site being invariable
pinvar ~ dnBeta(1,1)
moves[mvi++] = mvScale(pinvar, lambda=0.1, tune=false, weight=2.0)
moves[mvi++] = mvSlide(pinvar, delta=10.0, tune=false, weight=2.0)


##############
# Tree model #
##############

speciation ~ dnExponential(10.)
extinction ~ dnExponential(10.)

# rescaling mv on speciation and extinction rates
moves[mvi++] = mvScale(speciation, lambda=1, tune=true, weight=3.0)
moves[mvi++] = mvScale(extinction, lambda=1, tune=true, weight=3.0)

sampling_fraction <- 23. / 270 # 23 out of the ~ 270 primate species

psi ~ dnBDP(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=75, taxa=taxa)

# moves on the tree
moves[mvi++] = mvNNI(psi, weight=10.0)
moves[mvi++] = mvFNPR(psi, weight=5.0)
moves[mvi++] = mvNodeTimeSlideUniform(psi, weight=10.0)


#### Specify a global molecular clock ####
clock ~ dnExponential(10.)
moves[mvi++] = mvScale(clock, lambda=1, tune=true, weight=3.0)

# the sequence evolution model
phyloSeq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock, siteRates=norm_gamma_rates, pInv=pinvar, type="DNA")

# attach the data
phyloSeq.clamp(data)


############
# Analysis #
############

mymodel = model(psi)

# add monitors
monitors[mni++] = mnScreen(alpha, pinvar, speciation, extinction, clock, printgen=1000)
monitors[mni++] = mnFile(psi, filename="output/PS0.tre", printgen=10)
monitors[mni++] = mnModel(filename="output/PS0.params.txt",printgen=10)

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.burnin(10000,100)
mymcmc.run(30000)


# summarize output
treetrace = readTreeTrace("output/PS0.tre")
#treetrace.summarize()

map_tree = mapTree(treetrace,"output/PS0_map.tre")


# you may want to quit RevBayes now
q()

