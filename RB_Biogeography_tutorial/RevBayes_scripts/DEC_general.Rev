# source("/Users/mlandis/projects/rb_lagrange/code/n3_dec.Rev")

# presence-absence to state conversion
# 1  000
# 2  100
# 3  010
# 4  110
# 5  001
# 6  101
# 7  011
# 8  111

# per-area extinction rates
# ... for area i
for (i in 1:n_areas) {
    e[i] ~ dnExp(10.)
    mv[mvi++] = mvScale(e[i], weight=2)
}

# between-area dispersal rates
for (i in 1:n_areas) { 							# ... from area i
    for (j in 1:n_areas) {    					# ... to area j 
	    d[i][j] <- 0.
        if (i != j) {       				# ... ignoring self-dispersal events
            d[i][j] ~ dnExp(10.)
            mv[mvi++] = mvScale(d[i][j], weight=2)
        }
    }
}

# make the rate matrix
maxRangeSize <- 2
er_nat := fnDECRates(dispersalRates=d, extinctionRates=e, maxRangeSize=maxRangeSize)
er := simplex(er_nat)
bf <- simplex(rep(1,n_states))
q := fnFreeK(er, bf)

# and root frequencies
rf := fnDECRoot( rootFreqs=rep(1, n_states), maxRangeSize=maxRangeSize)

# create the cladogenesis transition probability matrix
widespread_sympatry_wt <- 1
subset_sympatry_wt     <- 1
allopatry_wt           <- 1
clado_prior            <- [ widespread_sympatry_wt, subset_sympatry_wt, allopatry_wt ]

# create prior on event types
clado_type             ~ dnDirichlet(clado_prior)
#mv[mvi++]              = mvSimplex(clado_type, alpha=50., numCats=3, offset=1.0)
mv[mvi++]               = mvSimplexElementScale(clado_type, alpha=10, weight=5)
#clado_type <- simplex( clado_prior )

# for easy monitoring
widespread_sympatry    := clado_type[1]
subset_sympatry        := clado_type[2]
allopatry              := clado_type[3]

clado_prob := fnCladoProbs(clado_type, n_areas, 2)
