# source("/Users/mlandis/projects/rb_lagrange/code/rb_lagrange.Rev")

# works for current initialization
dispersal[1][2] <- 1.020
dispersal[1][3] <- 1.003
dispersal[2][1] <- 2.100
dispersal[2][3] <- 2.003
dispersal[3][1] <- 3.100
dispersal[3][2] <- 3.020
extirpation[1] <- 0.100
extirpation[2] <- 0.020
extirpation[3] <- 0.003


r_d ~ dnExp(10.)
r_e ~ dnExp(10.)
for (i in 1:n_areas) {
	extirpation[i] := r_e
	for (j in 1:n_areas) {
		if (i != j) {
			dispersal[i][j] := r_d
		}
	}
}

# get bit vector to map area-sets to states
bits = [ rep(0,n_areas) ]
for (i in 2:n_states) {
	b = rep(0,n_areas)
	_i = i-1
	for (j in n_areas:1) {
		b[j] = _i % 2
		_i = floor(_i / 2)
		if (_i == 0) {
			break
		}
	}
	bits[i] = b
}

"make DEC Q matrix rates"
jdx = 1
for (i in 1:n_states) {
	r[1][i] <- 0.
}
for (i in 1:n_states) {
    for (j in 1:n_states) {
        r[i][j] <- 0.
    }
	for (j in 1:n_areas) {
		if (bits[i][j] == 1) {
			# "extirpation"
            # rate to lose this area is the extirpation value for the area
            k = (i-1) - floor(2^(n_areas-j)) + 1
			r[i][k] := extirpation[j]
		} else if (bits[i][j] == 0) {
			# "dispersal"
            # rate to gain this area is the sum of dispersal rates into this area
            k = (i-1) + floor(2^(n_areas-j)) + 1
            for (l in 1:n_areas) {
				if (bits[i][l] == 1) {
	            	dispersal_terms[jdx][l] := dispersal[l][j]
                } else {
                	dispersal_terms[jdx][l] <- 0.
                }
            }
            r[i][k] := sum( 1.0*dispersal_terms[jdx] )
            jdx = jdx + 1
		}
	}
}

"make DEC Q matrix simplex"
idx = 1
for (i in 1:n_states) {
    for (j in 1:n_states) {
        if (i != j) {
            er_nat[idx] := r[i][j]
            idx = idx + 1
        }
    }
}

er := simplex(er_nat)
bf <- simplex(rep(1,n_states))

q := fnFreeK(er, bf)

# clado

"making DEC P matrix"
a <- simplex(1,1)
b <- simplex(1,1)
clado_prob := fnCladoProbs(a,b,n_areas,2)
str(clado_prob)
