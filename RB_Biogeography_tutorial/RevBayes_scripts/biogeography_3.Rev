# source("/Users/mlandis/projects/revbayes_tutorial/RB_Biogeography_tutorial/RevBayes_scripts/biogeography_3.Rev")

setwd("/Users/mlandis/projects/RB_Biogeography_tutorial/")

fp      = "./"
area_fn = fp + "data/earth25.still.atlas.txt"
data_fn = fp + "data/primates_bg_n25.nex"
tree_fn = fp + "data/primates.tree"
out_fp  = "./output/"
out_str = "bg_2rate"

data  <- readDiscreteCharacterData(data_fn)
tree  <- readTrees(tree_fn)[1]
atlas <- readAtlas(area_fn)

mvi = 1
mni = 1
ngen = 500000

for (i in 1:2) {
	glr[i]       ~ dnExponential(10.0)
	moves[mvi++] = mvScale(x=glr[i], lambda=0.5, weight=5.0)
}
q_area := fnFreeBinary(glr)
r_gain := glr[1]
r_loss := glr[2]


#dp ~ dnExponential(100.0)
#moves[mvi++] = mvScale(x=dp, lambda=0.5, weight=5.0)
dp <- 1.0

grm := fnBiogeoGRM(atlas=atlas, distancePower=dp, useAvailable=!true, useDistance=true)

q_range := fnBiogeoDE(gainLossRates=q_area, geoRateMod=grm, numAreas=atlas.nAreas(), forbidExtinction=true)
#q_range := fnBiogeoDE(gainLossRates=q_area, numAreas=atlas.nAreas(), forbidExtinction=true)

csf ~ dnDirichlet( [1, 5, 5] )
widespread_sympatry := csf[1]
subset_sympatry     := csf[2]
allopatry           := csf[3]
moves[mvi++] = mvSimplexElementScale(csf, alpha=20.0, weight=5.0)

M ~ dnPhyloDACTMC(tree=tree, Q=q_range, C=csf, type="Biogeo", forbidExtinction=true, useCladogenesis=true)
M.clamp(data)
M.lnProbability()

moves[mvi++] = mvCharacterHistory(ctmc=M, qmap=q_range, tree=tree, lambda=0.05, type="Biogeo", graph="node", proposal="rejection", weight=100.0)
moves[mvi++] = mvCharacterHistory(ctmc=M, qmap=q_range, tree=tree, lambda=0.05, type="Biogeo", graph="branch", proposal="rejection", weight=100.0)
moves[mvi++] = mvCharacterHistory(ctmc=M, qmap=q_range, tree=tree, lambda=1.0, type="Biogeo", graph="node", proposal="rejection", weight=40.0)
moves[mvi++] = mvCharacterHistory(ctmc=M, qmap=q_range, tree=tree, lambda=1.0, type="Biogeo", graph="branch", proposal="rejection", weight=40.0)


my_model = model(M)


#monitors[mni++] = mnScreen(glr, dp, narrow_sympatry, allopatry, widespread_sympatry, printgen=100)
monitors[mni++] = mnScreen(r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry, printgen=100)
monitors[mni++] = mnFile(r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry, filename=out_fp+out_str+".params.txt", printgen=10)


monitors[mni++] = mnCharHistoryNewick(filename=out_fp+out_str+".events.txt", ctmc=M, tree=tree, printgen=10, style="events")
monitors[mni++] = mnCharHistoryNewick(filename=out_fp+out_str+".counts.txt", ctmc=M, tree=tree, printgen=10, style="counts")

monitors[mni++] = mnCharHistoryNhx(filename=out_fp+out_str+".phw.txt", ctmc=M, tree=tree, atlas=atlas, samplegen=10, maxgen=ngen, burnin=0.5)

my_mcmc = mcmc(my_model, monitors, moves)

my_mcmc.run(generations=ngen)

