mv[++mi] = mvScale(r_e, weight=5)
for (i in 1:n_areas) {
    e[i] := r_e
}
r_d ~ dnExponential(10.0)
mv[++mi] = mvScale(r_d, weight=5)
for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        if (i != j) {
            d[i][j] := r_d
        }
    }
}
r[4][2] := e[2]                 # 011 -> 001 : Extirpate in area 2
r[4][3] := e[3]                 # 011 -> 010 : Extirpate in area 3
r[6][2] := e[1]                 # 101 -> 001 : Extirpate in area 1
r[6][5] := e[3]                 # 101 -> 100 : Extirpate in area 3
r[7][3] := e[1]                 # 110 -> 010 : Extirpate in area 1
r[7][5] := e[2]                 # 110 -> 100 : Extirpate in area 2
r[8][4] := e[1]                 # 111 -> 011 : Extirpate in area 1
r[8][6] := e[2]                 # 111 -> 101 : Extirpate in area 2
r[8][7] := e[3]                 # 111 -> 110 : Extirpate in area 3
e
r
n_areas
data.nchar()
data
data[1]
data[1].methods()
clear()
# Create some String variables for file handling,
data_fn = "data/primates_bg_n3.tsv"
tree_fn = "data/primates.tree"
out_fn  = "output/bg_1"
data = readTSVCharacterData(data_fn, type="NaturalNumbers")
tree <- readTrees(tree_fn)[1]
n_areas = 3
n_states = 2^n_areas
mi = 0
for (i in 1:n_states) {
    for (j in 1:n_states) {
        r[i][j] <- 0.0
    }
}
r_e ~ dnExponential(10.0)
mv[++mi] = mvScale(r_e, weight=5)
for (i in 1:n_areas) {
    e[i] := r_e
}
r_d ~ dnExponential(10.0)
mv[++mi] = mvScale(r_d, weight=5)
for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        if (i != j) {
            d[i][j] := r_d
        }
    }
}
clear()
# Create some String variables for file handling,
data_fn = "data/primates_bg_n3.tsv"
tree_fn = "data/primates.tree"
out_fn  = "output/bg_1"
data = readTSVCharacterData(data_fn, type="NaturalNumbers")
tree <- readTrees(tree_fn)[1]
n_areas = 3
n_states = 2^n_areas
mi = 0
# construct the rate matrix for anagenic events. 
# First create a matrix, 8-by-8 in size, initialized with all zeroes
for (i in 1:n_states) {
    for (j in 1:n_states) {
        r[i][j] <- 0.0
    }
}
# create a extinction rate parameter and assign it a scale mover_e ~ dnExponential(10.0)mv[++mi] = mvScale(r_e, weight=5)# create a matrix to hold the per-area extinction ratesfor (i in 1:n_areas) {    e[i] := r_e}# create the dispersal rate and scale move r_d ~ dnExponential(10.0)mv[++mi] = mvScale(r_d, weight=5)# assign the between-area dispersal rates as determined by r_dfor (i in 1:n_areas) {    for (j in 1:n_areas) {        if (i != j) {            d[i][j] := r_d        }    }}# assign the extinction (range loss) ratesr[4][2] := e[2]                 # 011 -> 001 : Extirpate in area 2r[4][3] := e[3]                 # 011 -> 010 : Extirpate in area 3r[6][2] := e[1]                 # 101 -> 001 : Extirpate in area 1r[6][5] := e[3]                 # 101 -> 100 : Extirpate in area 3r[7][3] := e[1]                 # 110 -> 010 : Extirpate in area 1r[7][5] := e[2]                 # 110 -> 100 : Extirpate in area 2r[8][4] := e[1]                 # 111 -> 011 : Extirpate in area 1r[8][6] := e[2]                 # 111 -> 101 : Extirpate in area 2
r[8][7] := e[3]                 # 111 -> 110 : Extirpate in area 3
e
clear()
# Create some String variables for file handling,
data_fn = "data/primates_bg_n3.tsv"
tree_fn = "data/primates.tree"
out_fn  = "output/bg_1"
data = readTSVCharacterData(data_fn, type="NaturalNumbers")
tree <- readTrees(tree_fn)[1]
n_areas = 3
n_states = 2^n_areas
mi = 0
# construct the rate matrix for anagenic events. 
# First create a matrix, 8-by-8 in size, initialized with all zeroes
for (i in 1:n_states) {
    for (j in 1:n_states) {
        r[i][j] <- 0.0
    }
}
# create a extinction rate parameter and assign it a scale mover_e ~ dnExponential(10.0)mv[++mi] = mvScale(r_e, weight=5)# create a matrix to hold the per-area extinction ratesfor (i in 1:n_areas) {    e[i] := r_e}# create the dispersal rate and scale move r_d ~ dnExponential(10.0)mv[++mi] = mvScale(r_d, weight=5)# assign the between-area dispersal rates as determined by r_dfor (i in 1:n_areas) {    for (j in 1:n_areas) {        if (i != j) {            d[i][j] := r_d        }    }}# assign the extinction (range loss) ratesr[4][2] := e[2]                 # 011 -> 001 : Extirpate in area 2r[4][3] := e[3]                 # 011 -> 010 : Extirpate in area 3r[6][2] := e[1]                 # 101 -> 001 : Extirpate in area 1r[6][5] := e[3]                 # 101 -> 100 : Extirpate in area 3r[7][3] := e[1]                 # 110 -> 010 : Extirpate in area 1r[7][5] := e[2]                 # 110 -> 100 : Extirpate in area 2r[8][4] := e[1]                 # 111 -> 011 : Extirpate in area 1r[8][6] := e[2]                 # 111 -> 101 : Extirpate in area 2
r[8][7] := e[3]                 # 111 -> 110 : Extirpate in area 3
n_areas
q()
