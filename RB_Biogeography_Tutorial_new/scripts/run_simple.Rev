#!/usr/bin/rb

# filenames
range_fn = "data/n4/silversword.n4.range.nex"
tree_fn  = "data/n4/silversword.tre"
out_fn   = "output/simple"

# read binary (01) presence-absence range data
dat_range_01 = readDiscreteCharacterData(range_fn)

# convert binary ranges into NaturalNumbers
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC")

# compare characters for two taxa
dat_range_01[1]
dat_range_n[1]

# data dimensions
n_areas  = dat_range_01.nchar()
n_states = floor(2^n_areas)

# move/monitor index
mvi = 1
mni = 1
n_gen = 3000

###############
# Tree models #
###############

# read tree
tree <- readTrees(tree_fn)[1]


#######################
# Biogeography models #
#######################

#rate_bg <- 1
log10_rate_bg ~ dnUniform(-4,2)
log10_rate_bg.setValue(-2)
rate_bg := 10^log10_rate_bg
moves[mvi++] = mvSlide(log10_rate_bg, weight=4)

#log10_dispersal_rate ~ dnUniform(-4,2)
#log10_dispersal_rate.setValue(-2)
#dispersal_rate := 10^log10_dispersal_rate
#moves[mvi++] = mvSlide(log10_dispersal_rate, weight=3)

# first, the dispersal rates
#dispersal_rate ~ dnExp(1)
#moves[mvi++] = mvScale(dispersal_rate, weight=2)


#dispersal_rate <- abs(1)
for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        #dr[i][j] := dispersal_rate
        dr[i][j] <- abs(1)
    }
}


# then extirpation rates (or per-area extinction rates)
#log10_extirpation_rate ~ dnUniform(-4,2)
#log10_extirpation_rate.setValue(-2)
#extirpation_rate := 10^log10_extirpation_rate
#moves[mvi++] = mvSlide(log10_extirpation_rate, weight=3)

#extirpation_rate ~ dnExp(1)
#moves[mvi++] = mvScale(extirpation_rate, weight=2)

log_sd <- 0.5
log_mean <- ln(1) - 0.5*log_sd^2
extirpation_rate ~ dnLognormal(mean=log_mean, sd=log_sd)
moves[mvi++] = mvScale(extirpation_rate, weight=2)


for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        er[i][j] <- abs(0)    
        
    }
    er[i][i] := extirpation_rate
}


# build DEC rate matrices
Q_DEC := fnDECRateMatrix(dispersalRates=dr,
                         extirpationRates=er)
                       
    
# build clado probs
clado_event_types <- [ "s", "a" ]
clado_event_probs <- simplex(1,1)
P_DEC := fnDECCladoProbs(eventProbs=clado_event_probs,
                         eventTypes=clado_event_types,
                         numCharacters=n_areas)


m_bg ~ dnPhyloCTMCClado(tree=tree,
                           Q=Q_DEC,
                           cladoProbs=P_DEC,
                           branchRates=rate_bg,
                           type="NaturalNumbers",
                           nSites=1)
    
m_bg.clamp(dat_range_n)

############
# Monitors #
############


monitors[mni++] = mnScreen(printgen=100, rate_bg)
monitors[mni++] = mnModel(file=out_fn+".model.log", printgen=10)
monitors[mni++] = mnFile(tree, filename=out_fn+".tre", printgen=10)
monitors[mni++] = mnJointConditionalAncestralState(tree=tree,
                                                       ctmc=m_bg,
                                                       type="NaturalNumbers",
                                                       withTips=true,
                                                       withStartStates=true,
                                                       filename=out_fn+".states.log",
                                                       printgen=10)

############
# Analysis #
############

mymodel = model(m_bg)
mymcmc = mcmc(mymodel, monitors, moves)

#mymcmc.burnin(floor(n_gen/2), 10)
mymcmc.run(n_gen)


quit()
