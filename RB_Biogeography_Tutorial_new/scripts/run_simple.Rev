#!/usr/bin/rb

# filenames
range_fn = "data/n4/silversword.n4.range.nex"
phy_fn   = "data/n4/silversword.tre"
out_fn   = "output/simple"

# read binary (01) presence-absence range data
dat_range_01 = readDiscreteCharacterData(range_fn)

# convert binary ranges into NaturalNumbers
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC")

# compare characters for two taxa
dat_range_01[1]
dat_range_n[1]


# data dimensions
n_areas  = dat_range_01.nchar()
n_states = floor(2^n_areas)

# move/monitor index
mvi = 1
mni = 1

n_gen = 1e3

###############
# Tree models #
###############

# read tree
phy <- readTrees(phy_fn)[1]


#######################
# Biogeography models #
#######################

# first, the dispersal rates
dispersal_rate ~ dnExp(1)
moves[mvi++] = mvScale(dispersal_rate)


for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        dr[i][j] := dispersal_rate
    }
}


# then extirpation rates (or per-area extinction rates)
extirpation_rate ~ dnExp(1)
moves[mvi++] = mvScale(extirpation_rate)

for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        er[i][j] <- abs(0)    
        
    }
    er[i][i] := extirpation_rate
}


# build DEC rate matrices
Q_DEC := fnDECRateMatrix(dispersalRates=dr,
                         extirpationRates=er)
                       

# biogeographic clock rate is 1
rate_bg <- 1

    
# build clado probs
clado_event_types <- [ "s", "a" ]
clado_type_probs <- simplex(1,1)
P_DEC := fnDECCladoProbs(eventProbs=clado_type_probs,
                         eventTypes=clado_event_types,
                         numCharacters=n_areas)


ctmc_bg ~ dnPhyloCTMCClado(tree=phy,
                           Q=Q_DEC,
                           cladoProbs=P_DEC,
                           branchRates=rate_bg,
                           type="NaturalNumbers",
                           nSites=1)
    
ctmc_bg.clamp(dat_range_n)

############
# Monitors #
############


monitors[mni++] = mnScreen(printgen=100, dispersal_rate, extirpation_rate)
monitors[mni++] = mnModel(file=out_fn+".model.log", printgen=10)
monitors[mni++] = mnFile(phy, filename=out_fn+".tre", printgen=10)
monitors[mni++] = mnJointConditionalAncestralState(tree=phy,
                                                       ctmc=ctmc_bg,
                                                       type="NaturalNumbers",
                                                       withTips=true,
                                                       withStartStates=true,
                                                       filename=out_fn+".states.log",
                                                       printgen=10)

############
# Analysis #
############

mdl = model(ctmc_bg)
ch = mcmc(mdl, monitors, moves)

ch.run(n_gen)


quit()
