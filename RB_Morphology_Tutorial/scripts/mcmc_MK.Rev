######################
# read in the data 
######################

time_tree <- readTrees("data/Primates_tree.nex")[1]
data <- readDiscreteCharacterData("data/Primates_morph.nex")

n_char <- data.nchar()


# in this example we are only going to use the first character of the matrix
data.excludeCharacter(5:n_char)
#data.includeCharacter(1)


# Get some useful variables from the data. We need these later on.
n_species = data.ntaxa()
taxa = data.taxa()
n_branches = 2 * n_species - 3


mvi = 0
mni = 0

n_sites = 4


###################
# Molecular clock #
###################

### We know from empirical estimates a clock rate which is 0.01 (=1%) per million years per site
### Nevertheless, we will estimate it here because we fixed the root age
### we use a uniform prior on the log-transform clock rate
log_clock_rate ~ dnUniform(-8,2)
moves[++mvi] = mvSlide(log_clock_rate, weight=2.0)
clock_rate := 10^log_clock_rate


######################
# Substitution Model #
######################

# Now create a deterministic variable for the nucleotide substitution rate matrix.
Q <- fnJC(2)

# Create a stochastic node for the sequence evolution continuous-time Markov chain (CTMC).
morph_ctmc ~ dnPhyloCTMC(tree=time_tree, Q=Q, branchRates=clock_rate, type="Standard")

# and attach the sequence data
morph_ctmc.clamp(data)



##################
# Finalize the integrated model and set up MCMC
##################

mymodel = model(time_tree)

# Create the monitors:
# First, a screen monitor with some useful variables:
monitors[++mni] = mnScreen(printgen=1000, clock_rate)

# A file monitor for our trees:
#monitors[++mni] = mnFile(filename="output/morph_MK_equal.trees", printgen=10, time_tree)

# The ancestral state monitor for the chromosome number reconstruction:
#monitors[++mni] = mnAncestralState(filename="output/morph_MK.log", printgen=10, tree=time_tree, ctmc=morph_ctmc, type="Standard")
#monitors[++mni] = mnJointConditionalAncestralState(filename="output/morph_MK_anc.log", printgen=10, tree=time_tree, ctmc=morph_ctmc, type="Standard", withTips=!FALSE, withStartStates=FALSE)

# And another monitor for all the model variables:
#monitors[++mni] = mnModel(filename="output/morph_MK_equal.log", printgen=10)

# Now set up the MCMC.
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals
mymcmc.burnin(generations=5000,tuningInterval=200)

### run the MCMC
mymcmc.run(generations=10000)

q()
