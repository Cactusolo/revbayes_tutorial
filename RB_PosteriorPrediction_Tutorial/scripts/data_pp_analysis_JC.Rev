################################################################################
#
# RevBayes Example: Bayesian model testing using posterior predictive simulation
#
# authors: Lyndon M. Coghill, Will Freyman, Sebastian Hoehna, and Jeremy M. Brown
#
#
# This script runs a full posterior predictive analysis using data-based
# comparisons. Inference-based comparisons (where MCMC is run on each and
# every simulated dataset) are also available in RevBayes.
#
#
################################################################################

# Let's set up some file workspace variables we'll need:
analysis_name = "pps_example"
model_name = "JC"
model_file_name = "scripts/"+model_name+"_Model.Rev"

# Read in the sequence alignment:
in_file = "data/primates_and_galeopterus_cytb.nex"
data <- readDiscreteCharacterData(in_file)

# Now we'll call a separate script that specifies the JC model
source( model_file_name )

# And let's run MCMC on our empirical dataset, just like
# a normal phylogenetic analysis. 
mcmc_gen = 10000
burnin_gen = 2000
source("scripts/MCMC_Empirical.Rev")

# Now we will use samples from the posterior distribution to
# simulate datasets:
source("scripts/PosteriorPredictive_Simulation.Rev")

# We will calculate summary metrics for both the empirical data
# and the simulated datasets:
num_post_sims = listFiles(path="output_"+model_name+"/" + analysis_name + "_post_sims").size()
source("scripts/PosteriorPredictive_DataSummary.Rev")

# And finally we calculate p-values and effect sizes:
emp_pps_file = "results_" + model_name + "/empirical_data_" + analysis_name + ".tsv"
sim_pps_file = "results_" + model_name + "/simulated_data_" + analysis_name + ".tsv"
outfileName = "results_" + model_name + "/data_pvalues_effectsizes_" + analysis_name + ".tsv"
source("scripts/PosteriorPredictive_PValues.Rev")

# To plot the results run the "plot_results.R" script.

# Ideally you would now run inference-based comparisons, but due to lack of time
# we will skip that here.

# As an exercise, try modifying the scripts above to see if other substition models
# fit the data better than Juke-Cantor.

q()
