################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a general time reversible (GTR)
#                   substitution model with gamma distributed rate variation among sites
#                   and a random local clock. The tree prior is a constant-rate
#                   birth-death process with a root calibration
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readDiscreteCharacterData("data/primates_cytb.nex")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
names <- data.names()
numBranches <- 2*n_species - 2

# set my move index
mi = 0



######################
# Substitution Model #
######################

#### specify the GTR+G substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[++mi] = mvSimplexElementScale(er,weight=3)


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves[++mi] = mvSimplexElementScale(pi,weight=2)


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


#############################
# Among Site Rate Variation #
#############################

alpha_prior <- 0.05
alpha ~ dnExponential( alpha_prior )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves[++mi] = mvScale(alpha,weight=2)




##############
# Tree model #
##############

# Specify a prior on the diversification and turnover rate
diversification ~ dnGamma(5,1)
turnover ~ dnGamma(5,1)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
extinction := turnover

# specify a prior on the root age (our informed guess is about 75-80 mya)
root ~ dnNormal(90.0,6.0)

sampling_fraction <- n_species / 450 # 23 out of the ~ 450 primate species

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves[++mi] = mvSlide(diversification,delta=1,tune=true,weight=1)
moves[++mi] = mvSlide(turnover,delta=1,tune=true,weight=1)
moves[++mi] = mvSlide(root,delta=1,tune=true,weight=1)

# construct a variable for the tree drawn from a birth death process
psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=abs(root), rho=sampling_fraction, nTaxa=n_species, names=names )

moves[++mi] = mvNarrow(psi, weight=5.0)
moves[++mi] = mvNNI(psi, weight=1.0)
moves[++mi] = mvFNPR(psi, weight=3.0)
moves[++mi] = mvSubtreeScale(psi, weight=3.0)
moves[++mi] = mvNodeTimeSlideUniform(psi, weight=15.0)


clade_simiiformes = clade("Cebus_albifrons", "Macaca_mulatta")
age_simiiformes := tmrca(psi, clade_simiiformes)


#######
# RLC #
#######

# get a random variable for the probability of a rate change
#rho ~ dnBeta(1,1)
# We need to initialize the probability of a rate change with a very low value because we want to start our MCMC at or close to the strict clock model.
# Starting from a strict clock model makes it easier for the MCMC to add new local clocks.
#rho.setValue(0.001)
#moves[++mi] = mvSlide(rho, delta=0.01, tune=true, weight=2.0)

rho <- 0.01
lambda <- 0.0


#meanRateChange <- 2.0                      # this gives a mean rate change by a factor of 7.811176 (choose a mean-value of 1.0 if you want an expected factor of 2.873571)
#meanRateChange ~ dnUnif(1.9,2.1)              # this gives a mean rate change by a factor of 7.811176 (choose a mean-value of 1.0 if you want an expected factor of 2.873571)
#stDevRateChange := meanRateChange / 3.0    # We could also divide by 5.0
#valueDist = dnBimodalLnorm(-meanRateChange,meanRateChange, stDevRateChange, stDevRateChange,0.5)

#moves[++mi] = mvSlide(meanRateChange, delta=0.01, tune=true, weight=2.0)

meanClockRate ~ dnUnif(0.0,100.0)
meanClockRate.setValue(5.6812E-3)
moves[++mi] = mvSlide(meanClockRate, delta=0.1, tune=true, weight=2.0)
moves[++mi] = mvScale(meanClockRate, lambda=0.1, tune=true, weight=2.0)

#branchRateMultipliers ~ dnBranchRateJumpProcess(valueDistribution=valueDist, tree=psi, lambda=lambda, rho=rho)
for (i in numBranches:1) {
   rateChangeProbability[i] := Probability(1-rho)      # + (1-exp(-lambda*psi.branchLength(i)))
   clockRateMultiplier[i] ~ dnReversibleJumpMixture(1, dnGamma(2,2), rateChangeProbability[i] )
   if ( psi.isRoot( psi.parent(i) ) ) {
      clockRate[i] := meanClockRate * clockRateMultiplier[i]
   } else {
      clockRate[i] := clockRate[psi.parent(i)] * clockRateMultiplier[i]
   }
   clockRateChange[i] := ifelse( clockRateMultiplier[i] == 1, 0, 1 )
   moves[++mi] = mvRJSwitch(clockRateMultiplier[i], weight=1.0)
   moves[++mi] = mvScale(clockRateMultiplier[i], lambda=0.1, tune=true, weight=2.0)
}

numRateChanges := sum( clockRateChange )



###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clockRate, siteRates=gamma_rates, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)






monitors[1] = mnScreen(printgen=1000, numRateChanges, root, age_simiiformes)
monitors[2] = mnModel(filename="output/primates_cytb_random_local_clock.log",printgen=10, separator = TAB)

# we actually do not need this monitor anymore
#monitors[3] = mnFile(filename="output/primates_cytb_random_local_clock.trees",printgen=10, separator = TAB, psi)

# we can use the extended tree monitor instead
monitors[3] = mnExtNewick(filename="output/primates_cytb_random_local_clock_ext.trees", isNodeParameter=TRUE, printgen=10, separator = TAB, tree=psi, clockRate, clockRateChange)




mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=10000,tuningInterval=250)
mymcmc.run(generations=30000)





# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/primates_cytb_random_local_clock_ext.trees", treetype="clock")

map_tree = mapTree(treetrace,"output/primates_cytb_random_local_clock.tree")

# you may want to quit RevBayes now
#q()

